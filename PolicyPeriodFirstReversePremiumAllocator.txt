package acme.payment

uses gw.api.web.payment.AllocationPool
uses gw.payment.FirstToLastAllocationStrategy
uses gw.api.web.payment.ReturnPremiumAllocationStrategy

class PolicyPeriodFirstReturnPremiumAllocationStrategy implements ReturnPremiumAllocationStrategy {
    override property get TypeKey(): ReturnPremiumAllocateMethod {
      return ReturnPremiumAllocateMethod.TC_POLICYPERIODFIRST
    }

    override function allocate(distItems: List<BaseDistItem>, amountToAllocate: AllocationPool) {
      var positiveDistItems = distItems.where(\distItem -> distItem.InvoiceItem.Amount.IsPositive)
      if (positiveDistItems.Empty) {
        return
      }

      var negativeDistItems = distItems.where(\distItem -> distItem.InvoiceItem.Amount.IsNegative)
      if (negativeDistItems.Empty) {
        return
      }

      var policyPeriod = negativeDistItems[0].PolicyPeriod

      // Get all the positive items that have the same policy period as the negative items
      var preferredPositiveDistItems = positiveDistItems.where( \ elt -> elt.PolicyPeriod == policyPeriod)

      var currency = amountToAllocate.Currency
      var amountNeededForPreferred = preferredPositiveDistItems.sum(currency,
          \ elt -> elt.GrossAmountOwed - elt.GrossAmountToApply)

      var amountAvailableForPreferred = amountNeededForPreferred.min(amountToAllocate.GrossAmount)
      new FirstToLastAllocationStrategy().allocate(preferredPositiveDistItems,
          AllocationPool.withGross(amountAvailableForPreferred))

      var amountAvailableForNonPreferred = amountToAllocate.GrossAmount - amountAvailableForPreferred
      if (amountAvailableForNonPreferred.IsPositive) {
        positiveDistItems.removeAll(preferredPositiveDistItems)
        new FirstToLastAllocationStrategy().allocate(positiveDistItems,
            AllocationPool.withGross(amountAvailableForNonPreferred))
      }
    }
  }
